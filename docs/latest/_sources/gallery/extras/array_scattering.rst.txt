
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/extras/array_scattering.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_extras_array_scattering.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_extras_array_scattering.py:


Array-based scattering calculations
===================================

This example demonstrates how to compute far fields, S1/S2 amplitudes and
Stokes parameters using arbitrary ``phi`` and ``theta`` arrays.

.. GENERATED FROM PYTHON SOURCE LINES 8-14

.. code-block:: Python


    import numpy as np
    from PyMieSim.single.scatterer import Sphere
    from PyMieSim.single.source import PlaneWave
    from PyMieSim.units import nanometer, degree, RIU, volt, meter








.. GENERATED FROM PYTHON SOURCE LINES 15-16

Create a simple plane wave source

.. GENERATED FROM PYTHON SOURCE LINES 16-22

.. code-block:: Python

    source = PlaneWave(
        wavelength=632.8 * nanometer,
        polarization=0 * degree,
        amplitude=1 * volt / meter,
    )








.. GENERATED FROM PYTHON SOURCE LINES 23-24

Define the scatterer

.. GENERATED FROM PYTHON SOURCE LINES 24-35

.. code-block:: Python

    scatterer = Sphere(
        diameter=200 * nanometer,
        property=1.5 * RIU,
        medium_property=1.0 * RIU,
        source=source,
    )

    # Define arbitrary angle arrays
    phi = np.linspace(0, np.pi, 8)
    theta = np.linspace(0, np.pi / 2, 8)








.. GENERATED FROM PYTHON SOURCE LINES 36-37

Far-field complex fields

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: Python

    E_para, E_perp = scatterer.get_far_field_array(phi, theta)
    print(E_para.shape, E_perp.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (8,) (8,)




.. GENERATED FROM PYTHON SOURCE LINES 41-42

S1 and S2 scattering amplitudes

.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: Python

    S1, S2 = scatterer.get_s1s2_array(phi)
    print(S1.shape, S2.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (8,) (8,)




.. GENERATED FROM PYTHON SOURCE LINES 46-47

Stokes parameters

.. GENERATED FROM PYTHON SOURCE LINES 47-49

.. code-block:: Python

    I, Q, U, V = scatterer.get_stokes_array(phi, theta)
    print(I.shape, Q.shape, U.shape, V.shape)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (8,) (8,) (8,) (8,)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.003 seconds)


.. _sphx_glr_download_gallery_extras_array_scattering.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: array_scattering.ipynb <array_scattering.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: array_scattering.py <array_scattering.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: array_scattering.zip <array_scattering.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
