
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/validation/pymiescatt/coreshell_1.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_validation_pymiescatt_coreshell_1.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_validation_pymiescatt_coreshell_1.py:


Core-Shell Particles: 1
=======================

.. GENERATED FROM PYTHON SOURCE LINES 6-76



.. image-sg:: /gallery/validation/pymiescatt/images/sphx_glr_coreshell_1_001.png
   :alt: Comparison of Scattering Efficiency for Core-Shell Particles
   :srcset: /gallery/validation/pymiescatt/images/sphx_glr_coreshell_1_001.png
   :class: sphx-glr-single-img





.. code-block:: Python



    # Standard library imports
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    from TypedUnit import ureg

    # PyMieSim imports
    from PyMieSim.experiment.scatterer import CoreShell
    from PyMieSim.experiment.source import Gaussian
    from PyMieSim.experiment import Setup
    from PyMieSim.directories import validation_data_path
    from MPSPlots.styles import mps

    # Define parameters
    wavelength = 600 * ureg.nanometer  # Light source wavelength in meters
    polarization = 0 * ureg.degree
    optical_power = 1 * ureg.watt  # Optical power in watts
    NA = 0.2 * ureg.AU  # Numerical aperture
    medium_index = 1.0 * ureg.RIU
    core_index = 1.5 * ureg.RIU
    shell_index = 1.4 * ureg.RIU
    shell_thickness = 1200 * ureg.nanometer  # Shell width in meters
    core_diameters = np.geomspace(10, 500, 400) * ureg.nanometer  # Core diameters in meters

    # Configure the Gaussian source
    source = Gaussian(
        wavelength=wavelength,
        polarization=polarization,
        optical_power=optical_power,
        NA=NA
    )

    # Setup core-shell scatterer
    scatterer = CoreShell(
        core_diameter=core_diameters,
        shell_thickness=shell_thickness,
        core_property=core_index,
        shell_property=shell_index,
        medium_property=medium_index,
        source=source
    )

    # Create experimental setup
    experiment = Setup(scatterer=scatterer, source=source)

    comparison_measures = ['Qsca', 'Qext', 'Qabs', 'g', 'Qpr', 'Qback']

    # Simulate using PyMieSim
    pymiesim_dataframe = experiment.get(*comparison_measures)

    pymiescatt_dataframe = pd.read_csv(validation_data_path / 'pymiescatt/example_coreshell_1.csv')

    # Plot results
    with plt.style.context(mps):
        figure, ax = plt.subplots(1, 1)


    pymiescatt_dataframe.plot(x='core_diameter', y=comparison_measures, ax=ax, linewidth=3)
    pymiesim_dataframe.plot(x='scatterer:core_diameter', ax=ax, color='black', linestyle='--', linewidth=1.5, show=False)


    ax.set(
        xlabel='Core Diameter (Î¼m)',
        ylabel='Scattering Efficiency',
        title='Comparison of Scattering Efficiency for Core-Shell Particles',
    )
    plt.legend()
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.596 seconds)


.. _sphx_glr_download_gallery_validation_pymiescatt_coreshell_1.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: coreshell_1.ipynb <coreshell_1.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: coreshell_1.py <coreshell_1.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: coreshell_1.zip <coreshell_1.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
