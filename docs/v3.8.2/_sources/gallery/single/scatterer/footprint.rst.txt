
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/single/scatterer/footprint.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_single_scatterer_footprint.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_single_scatterer_footprint.py:


Scatterer Footprint Calculation and Visualization
=================================================

This example demonstrates how to compute and visualize the footprint of a scatterer using PyMieSim.

.. GENERATED FROM PYTHON SOURCE LINES 7-46



.. image-sg:: /gallery/single/scatterer/images/sphx_glr_footprint_001.png
   :alt: Scatterer Footprint
   :srcset: /gallery/single/scatterer/images/sphx_glr_footprint_001.png
   :class: sphx-glr-single-img





.. code-block:: Python


    # Import necessary components from PyMieSim
    from TypedUnit import ureg
    from PyOptik import Material

    from PyMieSim.single.scatterer import Sphere
    from PyMieSim.single.detector import CoherentMode
    from PyMieSim.single.source import Gaussian

    # Define the Gaussian light source with specified properties
    source = Gaussian(
        wavelength=1 * ureg.micrometer,  # 1000 nm
        polarization=0 * ureg.degree,
        optical_power=1 * ureg.watt,  # Arbitrary units
        NA=0.3 * ureg.AU  # Numerical Aperture
    )

    # Create a spherical scatterer with a specified diameter and property
    scatterer = Sphere(
        diameter=2 * ureg.micrometer,  # 2000 nm
        source=source,
        medium_property=1.0 * ureg.RIU,  # Refractive index of the surrounding medium
        property=Material.BK7  # Using BK7 glass property
    )

    # Define the LPMode detector with specific parameters
    detector = CoherentMode(
        mode_number="HG02",
        NA=0.3 * ureg.AU,
        sampling=200 * ureg.AU,  # Number of sampling points
        gamma_offset=0 * ureg.degree,
        phi_offset=0 * ureg.degree,
    )

    # Compute the footprint data using the defined scatterer and detector
    data = detector.get_footprint(scatterer)

    # Plot the computed footprint data
    figure = data.plot()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.569 seconds)


.. _sphx_glr_download_gallery_single_scatterer_footprint.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: footprint.ipynb <footprint.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: footprint.py <footprint.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: footprint.zip <footprint.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
